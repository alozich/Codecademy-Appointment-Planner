{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alozi\\\\Projects\\\\appointment-planner-starting-v18\\\\appointment-planner-starting-v18\\\\src\\\\containers\\\\contactsPage\\\\ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = _ref => {\n  _s();\n  let {\n    contacts,\n    addContact\n  } = _ref;\n  const [contactName, setContactName] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [isDuplicate, setIsDuplicate] = useState(false);\n  const handleSubmit = useCallback(e => {\n    e.preventDefault();\n    if (!isDuplicate) {\n      addContact(contactName, phoneNumber, email);\n      setContactName(\"\");\n      setPhoneNumber(\"\");\n      setEmail(\"\");\n    }\n  }, [contactName, phoneNumber, email, isDuplicate, addContact]);\n\n  //Check for duplicate contact names\n  useEffect(() => {\n    const duplicate = contacts === null || contacts === void 0 ? void 0 : contacts.some(contact => contact.name.toLowerCase() === contactName.toLowerCase());\n    setIsDuplicate(duplicate);\n  }, [contactName, contacts]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        name: contactName,\n        setName: setContactName,\n        phone: phoneNumber,\n        setPhone: setPhoneNumber,\n        email: email,\n        setEmail: setEmail,\n        handleSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        tiles: contacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"HjbmM6foaNzdLZQOaPWsDjBV1M0=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","_ref","_s","contacts","addContact","contactName","setContactName","phoneNumber","setPhoneNumber","email","setEmail","isDuplicate","setIsDuplicate","handleSubmit","e","preventDefault","duplicate","some","contact","name","toLowerCase","children","fileName","_jsxFileName","lineNumber","columnNumber","setName","phone","setPhone","tiles","_c","$RefreshReg$"],"sources":["C:/Users/alozi/Projects/appointment-planner-starting-v18/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = ({contacts, addContact}) => {\r\n  const [contactName, setContactName] = useState(\"\");\r\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [isDuplicate, setIsDuplicate] = useState(false);\r\n\r\n\r\n\r\n  const handleSubmit = useCallback((e) => {\r\n    e.preventDefault();\r\n    if (!isDuplicate) {\r\n      addContact(contactName, phoneNumber, email);\r\n      setContactName(\"\");\r\n      setPhoneNumber(\"\");\r\n      setEmail(\"\");\r\n    }   \r\n\r\n  }, [contactName, phoneNumber, email, isDuplicate, addContact]);\r\n\r\n //Check for duplicate contact names\r\n useEffect(() => {\r\n    const duplicate = contacts?.some(contact => contact.name.toLowerCase() === contactName.toLowerCase());\r\n    setIsDuplicate(duplicate);\r\n  }, [contactName, contacts]);\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2> \r\n        <ContactForm \r\n          name={contactName}\r\n          setName={setContactName}\r\n          phone={phoneNumber}\r\n          setPhone={setPhoneNumber}\r\n          email={email}\r\n          setEmail={setEmail}\r\n          handleSubmit={handleSubmit}        \r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList\r\n          tiles={contacts}\r\n        />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}